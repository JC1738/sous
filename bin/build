#!/usr/bin/env bash

# Config
ARTIFACTS_DIR="artifacts"
# End Config

log() { echo "$@" 1>&2; }
die() { log "$@"; exit 1; }
TAG="$1"
shift
PLATFORMS="$1"
[ -z "$PLATFORMS" ] && PLATFORMS="all"

set -euo pipefail
ARTIFACTS_DIR="$PWD/$ARTIFACTS_DIR"

# NOTE: Removed Darwin build for now; cross-compiling cgo not possible.
#STANDARD_TARGETS=(linux/amd64 darwin/amd64)
STANDARD_TARGETS=(linux/amd64)

GOVERSION="$(go version)"

[ "$PLATFORMS" = "all" ] && REQUESTED_TARGETS=(${STANDARD_TARGETS[@]})
[ "$PLATFORMS" == "self" ] && { eval "$(go env)"; REQUESTED_TARGETS=($GOOS/$GOARCH); }
[ -n "${REQUESTED_TARGETS[0]}" ] || REQUESTED_TARGETS=($@)

log "Building for ${REQUESTED_TARGETS[*]}"

# Get the commit ID
COMMIT=$(git rev-parse HEAD)
COMMIT_ABBREV=${COMMIT:0:8}

[ -n "$COMMIT" ] || die "Unable to determine commit."

log "Building commit $COMMIT_ABBREV ($COMMIT)"

# Mark the build as dirty if any indexed files are modified
git diff-index --quiet HEAD || {
	log "Working tree is dirty, marking commit ID as dirty."
	COMMIT="dirty-$COMMIT"
	COMMIT_ABBREV="dirty-$COMMIT_ABBREV"
}

# Get the exact tag, branch, nearest tag for this commit
BRANCH=$(git rev-parse --abbrev-ref HEAD) || true
EXACT_TAG=$(git describe --exact-match --abbrev=0) || true
NEAREST_TAG=$(git describe --abbrev=0) || true

log "BRANCH: '$BRANCH'; EXACT_TAG: '$EXACT_TAG'; NEAREST_TAG: '$NEAREST_TAG'"

[ -n "$EXACT_TAG" ] || EXACT_TAG="$TAG"
[ -n "$EXACT_TAG" ] || die "Unable to determine tag. Either supply a tag as the first argument, or build inside a git repo."

log "BRANCH: '$BRANCH'; EXACT_TAG: '$EXACT_TAG'; NEAREST_TAG: '$NEAREST_TAG'"

# Neither of the below regexes work in Travis, using the corresponding -E flag or not, respectively.
# semver regex (extended)
##SEMVER='^v?\d+\.\d+\.\d+(-[a-zA-Z0-9_\-\.]+)?(\+[a-zA-Z0-9_\-\.]+)?'
# semver regex (basic)
##SEMVER='^v\?\d\+\.\d\+\.\d\+\(-[a-zA-Z0-9_\-\.]\+\)\?\(+[a-zA-Z0-9_\-\.]\+\)\?'
#log "SEMVER: $SEMVER"

# Try to get a semver version from, in order of preference:
# exact tag, nearest tag + commit ID, branch name + commit ID, or just use
# "0.0.0-unversioned+$COMMIT"

##VERSION="$(echo "$EXACT_TAG" | grep -o "$SEMVER")"
##
##log "VERSION: $VERSION"
##
##PLUS_COMMIT="+plus-$COMMIT_ABBREV"
##if [ -z "$VERSION" ]; then 
##	VERSION="$(echo "$NEAREST_TAG" | grep -oE "$SEMVER")$PLUS_COMMIT"
##fi
##if [ "$VERSION" = "$PLUS_COMMIT" ]; then
##	VERSION="$(echo "$BRANCH" | grep -oE "$SEMVER")$PLUS_COMMIT"
##fi
##if [ "$VERSION" = "$PLUS_COMMIT" ]; then
##	VERSION="0.0.0-unversioned+$COMMIT_ABBREV"
##fi

VERSION="${EXACT_TAG#v}"

log "Building sous version $VERSION ($COMMIT)"

# Empty the artifacts dir...
if [ -d "$ARTIFACTS_DIR" ]; then
	rm -r "$ARTIFACTS_DIR" && mkdir "$ARTIFACTS_DIR"
	echo "Do not check in this directory, it is used for ephemeral build artifacts." > \
		"$ARTIFACTS_DIR/README.md"
fi

log "Cleaned $ARTIFACTS_DIR."

log "Generate resources."
go generate

BUILDS_FAILED=0
BUILDS_SUCCEEDED=0
for T in "${REQUESTED_TARGETS[@]}"; do
	log "Starting compile for $T"
	IFS='/' read -ra PARTS <<< "$T"

	export GOOS="${PARTS[0]}" GOARCH="${PARTS[1]}"

	flags="-X 'main.RevisionID=$COMMIT'"

	ART_PATH="$ARTIFACTS_DIR/$VERSION/$GOOS/$GOARCH"
	
	# Compile
	if ! go build -ldflags="$flags" -o "$ART_PATH/sous"; then
		log "Build failed for $T"
		((BUILDS_FAILED++))
		continue
	fi

	log "Compile successful."

	# Create the archive
	ARCHIVE_PATH="$ARTIFACTS_DIR/sous-$VERSION-$GOOS-$GOARCH.tar.gz"
	log "Archiving $ART_PATH as $ARCHIVE_PATH"
	if ! [ -d "$ART_PATH" ]; then
		log "Archive path does not exist: $ART_PATH"
		BUILDS_FAILED=$((BUILDS_FAILED+1))
		continue
	fi
	if ! (cd "$ART_PATH" && tar -czvf "$ARCHIVE_PATH" .); then
		log "Failed to create archive for $V"
		BUILDS_FAILED=$((BUILDS_FAILED+1))
		continue
	fi
	BUILDS_SUCCEEDED=$((BUILDS_SUCCEEDED+1))
done
TOTAL_BUILDS=$((BUILDS_SUCCEEDED+BUILDS_FAILED))
if [[ "$BUILDS_FAILED" == 1 ]]; then
	die "1 build of $TOTAL_BUILDS failed."
elif [[ "$BUILDS_FAILED" != 0 ]]; then
	die "$BUILDS_FAILED of $TOTAL_BUILDS builds failed"
fi

log "========================= Contents of $ARTIFACTS_DIR:"
ls -lah "$ARTIFACTS_DIR"
log "========================= END"


log "All $BUILDS_SUCCEEDED of $BUILDS_SUCCEEDED builds were successful."

